package com.example.smartlenskotlin.di.module

import android.annotation.SuppressLint
import android.content.Context
import android.content.res.Configuration
import android.graphics.*
import android.hardware.camera2.*
import android.media.ImageReader
import android.os.Handler
import android.os.HandlerThread
import android.util.Log
import android.util.Size
import android.view.Surface
import android.view.TextureView
import android.view.WindowManager
import com.example.common.arch.SingleLiveEvent
import com.example.smartlenskotlin.widget.AutoFitTextureView
import dagger.Binds
import dagger.Module
import dagger.Provides
import io.reactivex.android.schedulers.AndroidSchedulers
import java.util.*
import java.util.concurrent.Semaphore
import java.util.concurrent.TimeUnit
import javax.inject.Inject

/**
 * Created by <a href="mailto:aucd29@hanwha.com">Burke Choi</a> on 2019. 2. 12. <p/>
 */

//@Module(includes = [CameraDelegateModule::class])
@Module
class Camera2Module {
    @Provides
    fun provideCameraManager(context: Context) =
            context.getSystemService(Context.CAMERA_SERVICE) as CameraManager

    @Provides
    fun provideWindowManager(context: Context) =
            context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
}

//@Module
//abstract class CameraDelegateModule {
//    @Binds
//    abstract fun bindCameraDelegate(delegate: CameraDelegate): Any
//}

class CameraDelegate @Inject constructor(val context: Context
    , val cameraManager: CameraManager
    , val windowManager: WindowManager): CameraDevice.StateCallback() {

    companion object {
        private val mLog = org.slf4j.LoggerFactory.getLogger(CameraDelegate::class.java)
        private val TAG = "CameraDelegate"

        const val MAX_PREVIEW_WIDTH  = 1920
        const val MAX_PREVIEW_HEIGHT = 1080
    }

    /**
     * A [Semaphore] to prevent the app from exiting before closing the camera.
     */
    private val mCameraOpenCloseLock = Semaphore(1)

    /**
     * An additional thread for running tasks that shouldn't block the UI.
     */
    private var mBackgroundThread: HandlerThread? = null

    /**
     * A [Handler] for running tasks in the background.
     */
    private var mBackgroundHandler: Handler? = null

    /**
     * [CaptureRequest.Builder] for the camera preview
     */
    private var mPreviewRequestBuilder: CaptureRequest.Builder? = null

    /**
     * An {@link ImageReader} that handles still image capture.
     */
    private var mImageReader: ImageReader? = null

    /**
     * This a callback object for the [ImageReader]. "onImageAvailable" will be called when a
     * still image is ready to be saved.
     */
    var mCameraPreviewListener: CameraPreviewListener? = null

    /**
     * A [CameraCaptureSession] for camera preview.
     */
    private var mCaptureSession: CameraCaptureSession? = null

    /**
     * [CaptureRequest] generated by [.mPreviewRequestBuilder]
     */
    private var mPreviewRequest: CaptureRequest? = null

    /**
     * A [CameraCaptureSession.CaptureCallback] that handles events related to JPEG capture.
     */
    private val mCaptureCallback = object : CameraCaptureSession.CaptureCallback() {
        override fun onCaptureProgressed(session: CameraCaptureSession,
            request: CaptureRequest,partialResult: CaptureResult) { }

        override fun onCaptureCompleted(session: CameraCaptureSession,
            request: CaptureRequest, result: TotalCaptureResult) { }
    }

    /**
     * [TextureView.SurfaceTextureListener] handles several lifecycle events on a
     * [TextureView].
     */
    val mSurfaceTextureListener = object : TextureView.SurfaceTextureListener {
        override fun onSurfaceTextureAvailable(texture: SurfaceTexture, width: Int, height: Int) {
            open(width, height)
        }

        override fun onSurfaceTextureSizeChanged(texture: SurfaceTexture, width: Int, height: Int) {
            configureTransform(width, height)
        }

        override fun onSurfaceTextureDestroyed(texture: SurfaceTexture): Boolean {
            return true
        }

        override fun onSurfaceTextureUpdated(texture: SurfaceTexture) {}
    }

    val mErrorCallback = SingleLiveEvent<String>()
    var mSensorOrientation: Int = 0
    var mFlashSupported: Boolean = false
    var mCameraDevice: CameraDevice? = null
    var mTextureView: AutoFitTextureView? = null

    lateinit var mPreviewSize: Size
    lateinit var mCameraId: String

    init {
        if (mLog.isDebugEnabled) {
            mLog.debug("INJECT CAMERA DELEGATE")
        }
    }

    @SuppressLint("MissingPermission")
    fun open(w: Int, h: Int) {
        setup(w, h)
        configureTransform(w, h)

        try {
            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw RuntimeException("Time out waiting to lock camera opening.")
            }

            cameraManager.openCamera(mCameraId, this, mBackgroundHandler)
        } catch (e: CameraAccessException) {
            e.printStackTrace()
        } catch (e: InterruptedException) {
            throw java.lang.RuntimeException("Interrupted while trying to lock camera opening.", e)
        }
    }

    fun close() {
        try {
            mCameraOpenCloseLock.acquire()

            mCaptureSession?.close()
            mCaptureSession = null

            mCameraDevice?.close()
            mCameraDevice = null

            mImageReader?.close()
            mImageReader = null
        } catch (e: InterruptedException) {
            throw java.lang.RuntimeException("Interrupted while trying to lock camera closing.", e)
        } finally {
            mCameraOpenCloseLock.release()
        }
    }

    /**
     * Sets up member variables related to camera.
     *
     * @param w The width of available size for camera preview
     * @param h The height of available size for camera preview
     */
    fun setup(w: Int, h: Int) {
        for(it in cameraManager.cameraIdList) {
            val characteristics = cameraManager.getCameraCharacteristics(it)

            // We don't use a front facing camera in this sample.
            val facing = characteristics.get(CameraCharacteristics.LENS_FACING)
            if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {
                continue
            }

            val map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
            if (map == null) {
                continue
            }

            // For still image captures, we use the largest available size.
            val largest = Collections.max(
                Arrays.asList(*map.getOutputSizes(ImageFormat.YUV_420_888)),
                CompareSizesByArea())

            // Find out if we need to swap dimension to get the preview size relative to sensor
            // coordinate.
            val rotation = windowManager.defaultDisplay.rotation

            mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION) ?: 0
            var swappedDimensions = false

            when (rotation) {
                Surface.ROTATION_0,
                Surface.ROTATION_180 -> if (mSensorOrientation == 90 || mSensorOrientation == 270) {
                    swappedDimensions = true
                }
                Surface.ROTATION_90,
                Surface.ROTATION_270 -> if (mSensorOrientation == 0 || mSensorOrientation == 180) {
                    swappedDimensions = true
                }
                else -> Log.e(TAG, "Display rotation is invalid: $rotation")
            }

            val displaySize = Point()
            windowManager.defaultDisplay.getSize(displaySize)

            var rotatedPreviewWidth  = w
            var rotatedPreviewHeight = h
            var maxPreviewWidth     = displaySize.x
            var maxPreviewHeight    = displaySize.y

            if (swappedDimensions) {
                rotatedPreviewWidth  = h
                rotatedPreviewHeight = w
                maxPreviewWidth     = displaySize.y
                maxPreviewHeight    = displaySize.x
            }

            if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
                maxPreviewWidth = MAX_PREVIEW_WIDTH
            }

            if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
                maxPreviewHeight = MAX_PREVIEW_HEIGHT
            }

            // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
            // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
            // garbage capture data.
            mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture::class.java),
                rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth, maxPreviewHeight, largest)

            // We fit the aspect ratio of TextureView to the size of preview we picked.
            val orientation = context.resources.configuration.orientation
            mPreviewSize.apply {
                mTextureView?.apply {
                    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                        setAspectRatio(height, height)
                    } else {
                        setAspectRatio(width, width)
                    }
                }
            }

            val available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE)

            mFlashSupported = available ?: false
            mCameraId       = it

            mCameraPreviewListener?.onPreviewReadied(mPreviewSize, mSensorOrientation)
        }
    }

    private fun configureTransform(w: Int, h: Int) {
        val rotation = windowManager.defaultDisplay.rotation

        val matrix = Matrix()
        val viewRect = RectF(0f, 0f, w.toFloat(), h.toFloat())
        val bufferRect = RectF(0f, 0f, mPreviewSize.height.toFloat(), mPreviewSize.width.toFloat())
        val centerX = viewRect.centerX()
        val centerY = viewRect.centerY()

        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY())
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL)
            val scale = Math.max(
                h.toFloat() / mPreviewSize.height,
                w.toFloat() / mPreviewSize.width)

            matrix.postScale(scale, scale, centerX, centerY)
            matrix.postRotate((90 * (rotation - 2)).toFloat(), centerX, centerY)
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180f, centerX, centerY)
        }

        mTextureView?.setTransform(matrix)
    }

    /**
     * Given `choices` of `Size`s supported by a camera, choose the smallest one that
     * is at least as large as the respective texture view size, and that is at most as large as the
     * respective max size, and whose aspect ratio matches with the specified value. If such size
     * doesn't exist, choose the largest one that is at most as large as the respective max size,
     * and whose aspect ratio matches with the specified value.
     *
     * @param choices           The list of sizes that the camera supports for the intended output
     * class
     * @param textureViewWidth  The width of the texture view relative to sensor coordinate
     * @param textureViewHeight The height of the texture view relative to sensor coordinate
     * @param maxWidth          The maximum width that can be chosen
     * @param maxHeight         The maximum height that can be chosen
     * @param aspectRatio       The aspect ratio
     * @return The optimal `Size`, or an arbitrary one if none were big enough
     */
    private fun chooseOptimalSize(
        choices: Array<Size>, textureViewWidth: Int,
        textureViewHeight: Int, maxWidth: Int, maxHeight: Int, aspectRatio: Size
    ): Size {

        // Collect the supported resolutions that are at least as big as the preview Surface
        val bigEnough = ArrayList<Size>()
        // Collect the supported resolutions that are smaller than the preview Surface
        val notBigEnough = ArrayList<Size>()
        val w = aspectRatio.width
        val h = aspectRatio.height
        for (option in choices) {
            if (option.width <= maxWidth && option.height <= maxHeight &&
                option.height == option.width * h / w
            ) {
                if (option.width >= textureViewWidth && option.height >= textureViewHeight) {
                    bigEnough.add(option)
                } else {
                    notBigEnough.add(option)
                }
            }
        }

        // Pick the smallest of those big enough. If there is no one big enough, pick the
        // largest of those not big enough.
        if (bigEnough.size > 0) {
            return Collections.min(bigEnough, CompareSizesByArea())
        } else if (notBigEnough.size > 0) {
            return Collections.max(notBigEnough, CompareSizesByArea())
        } else {
            Log.e(TAG, "Couldn't find any suitable preview size")
            return choices[0]
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////
    //
    // THREAD & HANDLER
    //
    ////////////////////////////////////////////////////////////////////////////////////

    fun startThread() {
        mBackgroundThread = HandlerThread("CameraBackground")
        mBackgroundThread?.run {
            start()
            mBackgroundHandler = Handler(getLooper())
        }
    }

    fun stopThread() {
        try {
            mBackgroundThread?.run {
                quitSafely()
                join()
            }

            mBackgroundThread = null
            mBackgroundHandler = null
        } catch (e: InterruptedException) {
            e.printStackTrace()
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////
    //
    // CameraDevice.StateCallback()
    //
    ////////////////////////////////////////////////////////////////////////////////////

    override fun onOpened(camera: CameraDevice) {
        mCameraOpenCloseLock.release()

        mCameraDevice = camera
        createCameraPreviewSession()
    }

    override fun onDisconnected(camera: CameraDevice) {
        mCameraOpenCloseLock.release()

        mCameraDevice?.close()
    }

    override fun onError(camera: CameraDevice, error: Int) {
        mCameraOpenCloseLock.release()

        mCameraDevice?.close()
        mCameraDevice = null
    }

    private fun createCameraPreviewSession() {
        val texture = mTextureView?.surfaceTexture
        if (texture == null) {
            throw java.lang.RuntimeException()
        }

        // We configure the size of default buffer to be the size of camera preview we want.
        texture.setDefaultBufferSize(mPreviewSize.width, mPreviewSize.height)

        // This is the output Surface we need to start preview.
        val surface = Surface(texture)

        mPreviewRequestBuilder = mCameraDevice?.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)
        mPreviewRequestBuilder?.addTarget(surface)

        mImageReader = ImageReader.newInstance(mPreviewSize.width, mPreviewSize.height,
            ImageFormat.YUV_420_888, 2)
        mImageReader?.let {
            it.setOnImageAvailableListener(mCameraPreviewListener, mBackgroundHandler)
            mPreviewRequestBuilder?.addTarget(it.surface)

            Log.i(TAG, "Opening camera preview: ${mPreviewSize.width} x ${mPreviewSize.height}")

            // 콜백 지옥.. =_ =

            // 이것 때문에 min api level 이 26 이였군 ;;; 삐뚫어질듯.. =_ = [aucd29][2019. 2. 12.]
            mCameraDevice?.let { dap ->
                dap.createCaptureSession(mutableListOf(surface, it.surface),
                    object: CameraCaptureSession.StateCallback() {
                        override fun onConfigured(session: CameraCaptureSession) {
                            mCaptureSession = session

                            try {
                                mPreviewRequestBuilder?.set(
                                    CaptureRequest.CONTROL_AF_MODE,
                                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE)

                                if (mFlashSupported) {
                                    mPreviewRequestBuilder?.set(CaptureRequest.CONTROL_AE_MODE,
                                        CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH)
                                }

                                mPreviewRequest = mPreviewRequestBuilder?.build()
                                mCaptureSession?.setRepeatingRequest(mPreviewRequest,
                                    mCaptureCallback, mBackgroundHandler)
                            } catch (e: CameraAccessException) {
                                e.printStackTrace()
                            }
                        }

                        override fun onConfigureFailed(session: CameraCaptureSession) {
                            mLog.error("ERROR: CAMERA CONFIG FAILED ")

                            io.reactivex.Single.just(mErrorCallback)
                                .observeOn(AndroidSchedulers.mainThread())
                                .subscribeOn(AndroidSchedulers.mainThread())
                                .subscribe { callback -> callback.value = "Failed" }
                        }
                    }, null)
            }
        }
    }
}

internal class CompareSizesByArea : Comparator<Size> {
    override fun compare(lhs: Size, rhs: Size): Int {
        // We cast here to ensure the multiplications won't overflow
        return java.lang.Long.signum(lhs.width.toLong() * lhs.height - rhs.width.toLong() * rhs.height)
    }
}

interface CameraPreviewListener : ImageReader.OnImageAvailableListener {
    fun onPreviewReadied(size: Size, cameraRotation: Int)
}